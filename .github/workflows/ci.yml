name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release
  CXX_STANDARD: 17

jobs:
  # Build and Test Matrix
  build-test:
    name: Build and Test (${{ matrix.os }}, ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, macos-12, macos-13]
        compiler: [gcc, clang]
        include:
          - os: ubuntu-22.04
            compiler: gcc
            cc: gcc-11
            cxx: g++-11
          - os: ubuntu-22.04
            compiler: clang
            cc: clang-14
            cxx: clang++-14
          - os: ubuntu-20.04
            compiler: gcc
            cc: gcc-9
            cxx: g++-9
          - os: ubuntu-20.04
            compiler: clang
            cc: clang-12
            cxx: clang++-12
          - os: macos-12
            compiler: gcc
            cc: gcc-11
            cxx: g++-11
          - os: macos-12
            compiler: clang
            cc: clang
            cxx: clang++
          - os: macos-13
            compiler: gcc
            cc: gcc-12
            cxx: g++-12
          - os: macos-13
            compiler: clang
            cc: clang
            cxx: clang++

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libboost-dev \
          libboost-system-dev \
          doxygen \
          graphviz \
          ${{ matrix.cc }} \
          ${{ matrix.cxx }}

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake boost doxygen graphviz

    - name: Set up compiler
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    - name: Configure CMake (Minimal Build)
      run: |
        cmake -S . -B build-minimal \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_CXX_STANDARD=${{ env.CXX_STANDARD }} \
          -DUNILINK_ENABLE_CONFIG=OFF \
          -DBUILD_EXAMPLES=ON \
          -DBUILD_TESTING=ON

    - name: Configure CMake (Full Build)
      run: |
        cmake -S . -B build-full \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_CXX_STANDARD=${{ env.CXX_STANDARD }} \
          -DUNILINK_ENABLE_CONFIG=ON \
          -DBUILD_EXAMPLES=ON \
          -DBUILD_TESTING=ON

    - name: Build (Minimal)
      run: cmake --build build-minimal -j $(nproc)

    - name: Build (Full)
      run: cmake --build build-full -j $(nproc)

    - name: Test (Minimal)
      run: |
        cd build-minimal
        ctest --output-on-failure --parallel $(nproc)

    - name: Test (Full)
      run: |
        cd build-full
        ctest --output-on-failure --parallel $(nproc)

    - name: Generate Documentation
      run: |
        cd build-full
        make docs

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build-*/Testing/
          build-*/docs/html/

  # Memory Safety Tests
  memory-safety:
    name: Memory Safety Tests
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libboost-dev \
          libboost-system-dev \
          clang-14

    - name: Configure with Sanitizers
      run: |
        cmake -S . -B build-sanitizer \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_COMPILER=clang++-14 \
          -DUNILINK_ENABLE_SANITIZERS=ON \
          -DUNILINK_ENABLE_MEMORY_TRACKING=ON \
          -DBUILD_TESTING=ON

    - name: Build with Sanitizers
      run: cmake --build build-sanitizer -j $(nproc)

    - name: Run Memory Safety Tests
      run: |
        cd build-sanitizer
        ctest --output-on-failure --parallel $(nproc)

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libboost-dev \
          libboost-system-dev

    - name: Configure for Performance
      run: |
        cmake -S . -B build-perf \
          -DCMAKE_BUILD_TYPE=Release \
          -DUNILINK_ENABLE_CONFIG=ON \
          -DBUILD_TESTING=ON

    - name: Build Performance Tests
      run: cmake --build build-perf -j $(nproc)

    - name: Run Performance Tests
      run: |
        cd build-perf
        ctest --output-on-failure --parallel $(nproc)

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang-format \
          clang-tidy \
          cppcheck

    - name: Check code formatting
      run: |
        find . -name "*.cpp" -o -name "*.hpp" -o -name "*.h" | \
        xargs clang-format --dry-run --Werror

    - name: Run clang-tidy
      run: |
        cmake -S . -B build-tidy \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        cd build-tidy
        make
        run-clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --std=c++17 \
          --suppress=missingIncludeSystem \
          --error-exitcode=1 \
          unilink/ examples/ test/

  # Docker Build and Test
  docker:
    name: Docker Build and Test
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: unilink:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm unilink:test --help || echo "Docker image built successfully"

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [build-test, memory-safety, performance, code-quality, docker, security]
    if: github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libboost-dev \
          libboost-system-dev \
          doxygen

    - name: Build Release
      run: |
        cmake -S . -B build-release \
          -DCMAKE_BUILD_TYPE=Release \
          -DUNILINK_ENABLE_CONFIG=ON \
          -DBUILD_EXAMPLES=ON \
          -DBUILD_TESTING=ON
        cmake --build build-release -j $(nproc)

    - name: Generate Documentation
      run: |
        cd build-release
        make docs

    - name: Create Release Archive
      run: |
        mkdir -p release
        cp -r build-release/lib release/
        cp -r build-release/include release/
        cp -r build-release/docs/html release/docs
        cp -r examples release/
        cp CMakeLists.txt release/
        cp README.md release/
        tar -czf unilink-${{ github.event.release.tag_name }}.tar.gz -C release .
        tar -czf unilink-${{ github.event.release.tag_name }}-docs.tar.gz -C build-release docs/html

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./unilink-${{ github.event.release.tag_name }}.tar.gz
        asset_name: unilink-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Documentation
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./unilink-${{ github.event.release.tag_name }}-docs.tar.gz
        asset_name: unilink-${{ github.event.release.tag_name }}-docs.tar.gz
        asset_content_type: application/gzip
